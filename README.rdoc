== README

--Linux--
* ...
                               ------------------------------------------------------------------
                                                      -GITHUB-
                              ---------------------------------------------------------------
git init: yeni depo
git clone /yol/depo(yerel),git clone kullaniciadi@sunucu:/yol/depo(uzak sunucudakini kopya): bir depoyu kopyalamak
 git add <dosyaadi>,git add *(hepsi):
 git commit -m "Teslim mesajı"
 git push origin master
 
 NOTTTT:  git push --force-with-lease: upstream repodan pull ettik ettikten sonra değişiklik yaptım,50 commit ana repodan geri kalmış bnm local github repom, git push origin master ile yerel repoma commit edince hata verdi.  bu komut satırı ile local github repoma projenn son halini attım :)
 

 
 
 http://rogerdudler.github.io/git-guide/index.tr.html
 
 
                              -------------------------------------------------------------------
                                                      -github end-
                              ---------------------------------------------------------------
--Ruby on Rails--
* ...
-Model-
* ...
                              -------------------------------------------------------------------
                                                      -COFFEESCRİPT-
                              --------------------------------------------------------------------
NOT:Coffescriptte indentation çok önemli. Coffe kodlarken indentation için ya tab kullan ya da whitespace kullan karışık kullanırsan hata veriyor.
Not1:
(->) işareti  'function() {});' yerine yazılır.

https://css-tricks.com/jquery-coffeescript/



-------------------------------------------------------------------------------------------------------------------------------
                                                      -CONTROLLER-
                                ----------------------------------------------------------------------
*CONCERNS NEDİR VE NE İŞE YARAR ?

Concerns controllerlarda veya modelde yapacağımız bir işi bir baska modeldede yapmak istersek ve kontroller ve modeli sisman tutmak istemezsek kullanılır. 

bir concerns oluşturduk.
controller/concerns/commentable.rb

module Commentable 

   included do 
        has_many :comments, as: :commentable 
   end
   
   
   def last_comment
   ...........
   end
end

simdi bu concernü modelden veya controllerdan kullanmak istiyoruz ve article ve event modelinde kullanalım

ilk bu concern bir modele ait olması lazım

comment.rb
belongs_to :commentable,polymorphic: true

article.rb
include Commentable

event.rb 
include Commentable 

controllerdan bu metodu kullanmak istiyorsan controlera  include Commentable  edip modelname.last_comment diyip kullana bilirsin.



*Authentication session mantığını anlamak için güzel bir video;
 https://www.youtube.com/watch?v=zQJtlvlNunw
 ----------------------------------
 new  ve build farkı
 
 new: Belirli bir model için instance variable oluşturur.
 @person = Person.new
 
 build: yine instance variable oluşturur fakat ilişkili modeller arasında
 1-) @profile = User.build_profile  #has_one
 2-) @books = User.messages.build #has_many  
                              ----------------------------------------------------------------------
                                                         -VIEW-
                              -----------------------------------------------------------------------
## Creating a new article
# long-style:
form_for(@article, url: articles_path)
# same thing, short-style (record identification gets used):
form_for(@article)
 
## Editing an existing article
# long-style:
form_for(@article, url: article_path(@article), html: {method: "patch"})
# short-style:
form_for(@article)
-----------------------------------------------------------------------
About View Forms
-----------------------------------------------------------------------
* fields_for nesnesini fom_for nesnesinin içinde f.fields_for diye kullanıcaksan mvc mimarisini nested  olucak sekilde yapmalısın detaylı bilgi için;
http://guides.rubyonrails.org/form_helpers.html
(9.2 Nested form)-başlığı altımda

* form_for nesnesinin içinde file_field kullanıyorsan ;
<tt> <%= form_for @article, html: { multipart: true } do |f| %> </tt>
-----------------------------------------------------------------------
                           viewend
                              -----------------------------------------------------------------------
                                                      -ROUTES-
                              -----------------------------------------------------------------------
Javascript hatalarını bulmak için LOGLARA BAKILIR
terminalde sürekli açık olmalı!!!!
  
  1.Projenin olduğu dizine gel.
  2.Bu kodu terminalde çalıştır. tail -f log/development.log
  
  NOT: Chrome ve Firefox 'ta hata veriyorsa tarayıcı ile ilgili değildir.
  respond_to ile render ederken js ile json aynı değil missing template hatası alırız
  Çözüm Olarak: render: nothing: true {status: 200(-->ok demek)}
                            -----------------------------------------------------------------------
                                                  ACTİVE RECORD QUERY
                            -----------------------------------------------------------------------

1-find: aramayı sadece primary key'e gore yapar.
 ÖRNEKLER:
 Person.find(1) #id=1 olanı getirir
 Person.find(1,2,6) #id=1,2,6 olanları getirir
 Person.find([7,17]) #id= 7'den 17'ye kadar olan kayıtları getirir.
 
 Not: update_attribute(s) kullanımı find ile yapılır. 
 u =User.find(1)
 u.update_attributes(password: '12345678',password_confirmation: '12345678')
 
 2-take: Herhangi bi sıralama gözetmeksizin belirtilen sayıda kayıt getirir.(random olarak)
 ÖRNEKLER:
 Person.take   #SELECT * FROM persons LIMIT 1
 Person.take(5)   #SELECT * FROM persons LIMIT 5
 
 take!: take ile aynı çalışır tek farkı,herhangi record return etmezse 
 ERR: ActiveRecord::RecordNotFound if no matching record is found.
 şeklinde hata verilmesini sağlar.
 
 3-first: primary key'e göre ilk kaydı geri döndürür
 ÖRNEKLER:
 Person.first  #SELECT * FROM persons ORDER BY persons.id ASC LIMIT 1  ->İLK KAYIT
 Person.first(3)  #SELECT * FROM persons ORDER BY persons.id ASC LIMIT 3  -> İLK 3 KAYIT
 
 first! --->>kayıt yoksa hata mesajı verir
 
 4-last: primary key'e göre son kaydı getirir
 ÖRNEKLER:
 Person.last  #SELECT * FROM clients ORDER BY clients.id DESC LIMIT 1
 Person.last(5)  #SELECT * FROM clients ORDER BY clients.id DESC LIMIT 5
 
 last! --->>kayıt yoksa hata mesajı verir
 
 5-find_by: herhangi bir attribute ile arama yapar ve ilk kaydı verir.
 ÖRNEKLER:
 
 Post.find_by name: 'Spartacus'
 Post.find_by "published_at < ?", 2.weeks.ago
 Post.find_by(:name, "Bob") = Post.find_by_name("Bob")
 Address.find_by_street_name_and_city("Andheri", "Newyork")
 
 find_by_<column_name> #tablodaki bütün attribute lar ile türetilebilir.
 
 
 6-where: birden fazla koşulla arama yapmak için kullanılır.  varsa birden fazla kayıt getirir .first .last demediğimiz sürece 
 bundan dolayı update_attributes yaparken tek bir kaydı hedef göstermek için find metodu kullanılır
 örnekler:
 u = User.where(:email =>'feride@code2.co')
 
 

<tt>Bidiğimiz Hersey kolay veya zor buraya yazılacaktır ve not alınıcaktır.</tt>.

-----------------------------------------------------------------------------------------------------------------
Kodlar:

-vim gemfile              kodu Gemfile dosyasının içeriğini terminale dökmeye yarar.
-vim config/routes.rb          routes.rb 
---------------------------------------------------------------------------
                     ---------------------------------------------------------------------------
                                                         TEST
                     ---------------------------------------------------------------------------

Environments: development,production,test(3ünde de farklı db ler kullanılabilir, gerekli ayarlar:config/database.yml)

testler,development ve productiondaki databaselere dokunmazlar!
 TERMİNALE :   ls -F test    yazarsak test folder ının içinde olan file ları görürüz.
                fixtures/
                controllers/
                helpers/
                mailers/
                integration
                models/
                test_helper.rb

fixtures:test için kullanılan datalrın organizasyonunu sağlar ve dataları barındırır.
         -testleri çalıştırmadan önce, önceden tanımlanmış veriler ile veritabanını doldurur.
test_helper.rb: varsayılan test ayarlarını tutar.

----------------------------------------
--Server sonlandırma--
tmp->pids->server.pid   içindeki no yu

terminalde kill no  çaşıştır sonra rails s çalışır

-------------------------------

----------------gem devise kurulumu------------
1. gemfile ---> gem 'devise'
2. bundle install
3. rails generate devise:install
4. rails generate devise User
5.  db->migration->devise_create_user.rb ---> t.boolean :admin satırını ekle
6. rake db:migrate
